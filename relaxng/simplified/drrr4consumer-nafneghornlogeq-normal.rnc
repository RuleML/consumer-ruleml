default namespace = "http://ruleml.org/spec"

start =
  Rule
  | Atom
  | Equal
  | Interval
  | Spatial
  | Operator
  | Time
  | And
  | Or
  | Neg
  | Negation
  | Implies
  | Equivalent
  | Forall
  | Exists
  | oid
Rule =
  element Rule {
    meta*,
    (if, then)?,
    (attribute direction { "bidirectional" }
     & attribute material { "yes" | "no" }
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute closure {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         | "universal"
         | "existential"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Atom =
  element Atom {
    (attribute closure {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       | "universal"
       | "existential"
     }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    oid?,
    degree?,
    op?,
    arg*,
    repo?,
    slot*,
    resl?
  }
Equal =
  element Equal {
    (attribute oriented { "no" | "yes" }
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    degree?,
    left,
    right
  }
Interval =
  element Interval {
    meta*,
    (arg_2, arg_2?)?,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Spatial =
  element Spatial {
    meta*,
    arg_3*,
    repo?,
    slot*,
    resl?,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Operator =
  element Operator {
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*
  }
Time =
  element Time {
    meta*,
    arg_4*,
    repo?,
    slot*,
    resl?,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute closure {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         | "universal"
         | "existential"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
And =
  element And {
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    degree?,
    formula*
  }
Or =
  element Or {
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    degree?,
    formula_2*
  }
Neg =
  element Neg {
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    strong
  }
Negation =
  element Negation {
    meta*,
    formula_3,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute iri { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Implies =
  element Implies {
    (attribute direction { "bidirectional" }
     & attribute material { "yes" | "no" }
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    degree?,
    if,
    then
  }
Equivalent =
  element Equivalent {
    (attribute closure {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       | "universal"
       | "existential"
     }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    degree?,
    torso,
    torso
  }
Forall =
  element Forall {
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    degree?,
    declare+,
    formula_4
  }
Exists =
  element Exists {
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    degree?,
    declare+,
    formula_5
  }
oid =
  element oid {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Ind
       | Data
       | Interval_2
       | Spatial_2
       | Time_2
       | Var
       | Expr
       | Plex)
  }
meta =
  element meta {
    attribute index { xsd:positiveInteger }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Interval
       | Spatial
       | Operator
       | Time
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Equivalent
       | Rule)
  }
if =
  element if {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Interval
       | Spatial
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Naf)
  }
then =
  element then {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Interval
       | Spatial
       | Operator
       | Time
       | Neg
       | Negation)
  }
degree =
  element degree {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Data
  }
op =
  element op {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Rel
  }
arg =
  element arg {
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex)
  }
repo =
  element repo {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Var | Plex_2)
  }
slot =
  element slot {
    (attribute card { xsd:nonNegativeInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (Ind | Data | Interval_2 | Spatial_2 | Time_2 | Expr | Plex),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex)
  }
resl =
  element resl {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Var | Plex_3)
  }
left =
  element left {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Ind
       | Data
       | Interval_2
       | Spatial_2
       | Time_2
       | Var
       | Expr
       | Plex)
  }
right =
  element right {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Ind
       | Data
       | Interval_2
       | Spatial_2
       | Time_2
       | Var
       | Expr
       | Plex)
  }
arg_2 =
  element arg {
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2),
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
arg_3 =
  element arg {
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | After
     | Before
     | Every
     | Any
     | Timer
     | Operator),
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
arg_4 =
  element arg {
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | After
     | Before
     | Every
     | Any
     | Timer
     | Operator),
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Interval
       | Spatial
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Naf)
  }
formula_2 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Interval
       | Spatial
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Naf)
  }
strong =
  element strong {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Interval
       | Spatial
       | Operator
       | Time
       | Neg
       | Negation)
  }
formula_3 =
  element formula {
    (Atom
     | Equal
     | Interval
     | Spatial
     | Operator
     | Time
     | Neg
     | Negation),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
torso =
  element torso {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Interval
       | Spatial
       | Operator
       | Time
       | Neg
       | Negation)
  }
declare =
  element declare {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Var
  }
formula_4 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Interval
       | Spatial
       | Operator
       | Time
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Rule)
  }
formula_5 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Interval
       | Spatial
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Exists)
  }
Skolem =
  element Skolem {
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    xsd:token
  }
Ind =
  element Ind {
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    xsd:token
  }
Data =
  element Data {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute meta {
        list {
          xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
          | xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
          | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
        }
      }?
    & attribute vocab { xsd:anyURI }?
    & text
    & _1*
  }
Interval_2 =
  element Interval {
    meta*,
    (arg_2, arg_2?)?,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Spatial_2 =
  element Spatial {
    meta*,
    arg_3*,
    repo?,
    slot*,
    resl?,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Time_2 =
  element Time {
    meta*,
    arg_4*,
    repo?,
    slot*,
    resl?,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute closure {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         | "universal"
         | "existential"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Var =
  element Var {
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    xsd:token
  }
Expr =
  element Expr {
    (attribute per { "copy" | "value" | "open" }
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    oid?,
    op_2?,
    arg*,
    repo?,
    slot*,
    resl?
  }
Plex =
  element Plex {
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    arg*,
    repo?,
    slot*,
    resl?
  }
Naf =
  element Naf {
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    weak
  }
Rel =
  element Rel {
    (attribute iri { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    xsd:token
  }
Plex_2 =
  element Plex {
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    arg*,
    repo?
  }
Plex_3 =
  element Plex {
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    meta*,
    slot*,
    resl?
  }
During =
  element During {
    meta*,
    arg_2,
    arg_2,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Overlaps =
  element Overlaps {
    meta*,
    arg_2,
    arg_2,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Starts =
  element Starts {
    meta*,
    arg_2,
    arg_2,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Precedes =
  element Precedes {
    meta*,
    arg_2,
    arg_2,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Succeeds =
  element Succeeds {
    meta*,
    arg_2,
    arg_2,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Meets =
  element Meets {
    meta*,
    arg_2,
    arg_2,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Equal_2 =
  element Equal {
    meta*,
    arg_2,
    arg_2,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Finishes =
  element Finishes {
    meta*,
    arg_2,
    arg_2,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Operator_2 =
  element Operator {
    meta*,
    arg_2,
    arg_2,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
After =
  element After {
    meta*,
    (arg_2, arg_2?)?,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Before =
  element Before {
    meta*,
    (arg_2, arg_2?)?,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Every =
  element Every {
    meta*,
    arg_2?,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Any =
  element Any {
    meta*,
    arg_2*,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
Timer =
  element Timer {
    meta*,
    (arg_2, arg_2?)?,
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute scope {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
         | "local"
         | "global"
         | "private"
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?)
  }
_1 =
  element * {
    attribute * { text }*,
    (text & _1*)
  }
op_2 =
  element op {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Fun
  }
weak =
  element weak {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Interval
       | Spatial
       | Operator
       | Time
       | Neg
       | Negation)
  }
Fun =
  element Fun {
    (attribute per { "copy" | "value" | "open" }
     & attribute iri { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         list {
           xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
           | xsd:string {
               minLength = "1"
               pattern =
                 "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             }
           | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
         }
       }?
     & attribute vocab { xsd:anyURI }?),
    xsd:token
  }
