default namespace = "http://ruleml.org/spec"
namespace ns1 = "http://www.w3.org/2001/XMLSchema-instance"

start =
  Rule
  | Atom
  | Interval
  | Spatial
  | Equal
  | Operator
  | Time
  | And
  | Or
  | Neg
  | Negation
  | Naf
  | Implies
  | Equivalent
  | Forall
  | Exists
Rule =
  element Rule {
    meta*,
    degree?,
    ((if, then)
     | ((Atom
         | Interval
         | Spatial
         | Equal
         | Operator
         | Time
         | And
         | Or
         | Neg
         | Negation
         | Naf
         | Implies
         | Equivalent
         | Forall
         | Exists),
        (Atom
         | Interval
         | Spatial
         | Equal
         | And
         | Or
         | Neg
         | Negation
         | Implies
         | Equivalent
         | Forall
         | Exists))
     | ((Atom
         | Interval
         | Spatial
         | Equal
         | Operator
         | Time
         | And
         | Or
         | Neg
         | Negation
         | Naf
         | Implies
         | Equivalent
         | Forall
         | Exists),
        then)
     | (if,
        (Atom
         | Interval
         | Spatial
         | Equal
         | And
         | Or
         | Neg
         | Negation
         | Implies
         | Equivalent
         | Forall
         | Exists)))?,
    (attribute material {
       "yes"
       | "no"
       | xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Atom =
  element Atom {
    (attribute closure {
       "universal"
       | "existential"
       | xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    oid?,
    degree?,
    (op | Rel)?,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | arg)*,
    repo?,
    slot*,
    resl?
  }
Interval =
  element Interval {
    meta*,
    ((Skolem
      | Ind
      | Data
      | Interval_2
      | Spatial_2
      | Time_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_2
      | content
      | arg_2),
     (Skolem
      | Ind
      | Data
      | Interval_2
      | Spatial_2
      | Time_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_2
      | content
      | arg_2)?)?,
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Spatial =
  element Spatial {
    meta*,
    (((Skolem
       | Ind
       | Data
       | Interval_2
       | Spatial_2
       | Time_2
       | Var
       | Expr
       | Plex
       | After
       | Before
       | Every
       | Any
       | Timer
       | Operator
       | arg_3)*,
      repo?,
      slot*,
      resl?)
     | content_2*),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Equal =
  element Equal {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | left),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | right)
  }
Operator =
  element Operator {
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    (Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Rule
     | formula)*
  }
Time =
  element Time {
    meta*,
    (((Skolem
       | Ind
       | Data
       | Interval_2
       | Spatial_2
       | Time_2
       | Var
       | Expr
       | Plex
       | After
       | Before
       | Every
       | Any
       | Timer
       | Operator
       | arg_4)*,
      repo?,
      slot*,
      resl?)
     | content_3*),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
And =
  element And {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    (formula_2
     | Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists)*
  }
Or =
  element Or {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    (formula_3
     | Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists)*
  }
Neg =
  element Neg {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    (Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | strong)
  }
Negation =
  element Negation {
    meta*,
    (Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | formula_4),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute iri {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Naf =
  element Naf {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    (Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | weak)
  }
Implies =
  element Implies {
    (attribute material {
       "yes"
       | "no"
       | xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    ((if, then)
     | ((Atom
         | Interval
         | Spatial
         | Equal
         | Operator
         | Time
         | And
         | Or
         | Neg
         | Negation
         | Naf
         | Implies
         | Equivalent
         | Forall
         | Exists),
        (Atom
         | Interval
         | Spatial
         | Equal
         | And
         | Or
         | Neg
         | Negation
         | Implies
         | Equivalent
         | Forall
         | Exists))
     | ((Atom
         | Interval
         | Spatial
         | Equal
         | Operator
         | Time
         | And
         | Or
         | Neg
         | Negation
         | Naf
         | Implies
         | Equivalent
         | Forall
         | Exists),
        then)
     | (if,
        (Atom
         | Interval
         | Spatial
         | Equal
         | And
         | Or
         | Neg
         | Negation
         | Implies
         | Equivalent
         | Forall
         | Exists)))
  }
Equivalent =
  element Equivalent {
    (attribute closure {
       "universal"
       | "existential"
       | xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    (Atom
     | Interval
     | Spatial
     | Equal
     | And
     | Or
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | torso),
    (Atom
     | Interval
     | Spatial
     | Equal
     | And
     | Or
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | torso)
  }
Forall =
  element Forall {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    (declare | Var)+,
    (formula_5
     | Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Rule)
  }
Exists =
  element Exists {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    (declare | Var)+,
    (formula_6
     | Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists)
  }
meta =
  element meta {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Rulebase
       | Rule)
  }
degree =
  element degree {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Data
  }
if =
  element if {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
then =
  element then {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | And
       | Or
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
oid =
  element oid {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Ind
       | Data
       | Interval_2
       | Spatial_2
       | Time_2
       | Var
       | Expr
       | Plex)
  }
op =
  element op {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Rel
  }
Rel =
  element Rel {
    (attribute iri {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    xsd:token
  }
Skolem =
  element Skolem {
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    xsd:token
  }
Ind =
  element Ind {
    (attribute iri {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    xsd:token
  }
Data =
  element Data {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute meta {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & text
    & _1*
  }
Interval_2 =
  element Interval {
    meta*,
    ((Skolem
      | Ind
      | Data
      | Interval_2
      | Spatial_2
      | Time_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_2
      | content
      | arg_2),
     (Skolem
      | Ind
      | Data
      | Interval_2
      | Spatial_2
      | Time_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_2
      | content
      | arg_2)?)?,
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Spatial_2 =
  element Spatial {
    meta*,
    (((Skolem
       | Ind
       | Data
       | Interval_2
       | Spatial_2
       | Time_2
       | Var
       | Expr
       | Plex
       | After
       | Before
       | Every
       | Any
       | Timer
       | Operator
       | arg_3)*,
      repo?,
      slot*,
      resl?)
     | content_2*),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Time_2 =
  element Time {
    meta*,
    (((Skolem
       | Ind
       | Data
       | Interval_2
       | Spatial_2
       | Time_2
       | Var
       | Expr
       | Plex
       | After
       | Before
       | Every
       | Any
       | Timer
       | Operator
       | arg_4)*,
      repo?,
      slot*,
      resl?)
     | content_3*),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Var =
  element Var {
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    xsd:token
  }
Expr =
  element Expr {
    (attribute per {
       "copy"
       | "value"
       | "open"
       | xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute type {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    oid?,
    (op_2 | Fun)?,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | arg)*,
    repo?,
    slot*,
    resl?
  }
Plex =
  element Plex {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | arg)*,
    repo?,
    slot*,
    resl?
  }
arg =
  element arg {
    (attribute index { xsd:positiveInteger }
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex)
  }
repo =
  element repo {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Var | Plex_2)
  }
slot =
  element slot {
    (attribute card { xsd:nonNegativeInteger }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (Ind | Data | Interval_2 | Spatial_2 | Time_2 | Expr | Plex),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex)
  }
resl =
  element resl {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Var | Plex_3)
  }
During =
  element During {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Overlaps =
  element Overlaps {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Starts =
  element Starts {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Precedes =
  element Precedes {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Succeeds =
  element Succeeds {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Meets =
  element Meets {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Equal_2 =
  element Equal {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Finishes =
  element Finishes {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Operator_2 =
  element Operator {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2),
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content =
  element content {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    ((text & _2*)
     | Atom
     | Rel
     | And_2
     | Or_2
     | Implies
     | Forall
     | Exists
     | Expr
     | Fun
     | Rulebase
     | Neg
     | Naf
     | Equivalent
     | Equal
     | Data
     | Skolem
     | Ind
     | Var
     | Plex
     | Interval
     | Negation
     | Rule
     | Spatial
     | Operator
     | After
     | Before
     | Every
     | Any
     | Timer
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Time
     | op
     | formula_2
     | formula_3
     | if
     | then
     | declare
     | formula_5
     | formula_6
     | op_2
     | formula
     | degree
     | strong
     | weak
     | meta
     | torso
     | oid
     | slot
     | left
     | right
     | arg
     | resl
     | repo
     | content_4
     | arg_2
     | formula_4
     | arg_3
     | arg_4)
  }
arg_2 =
  element arg {
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2),
    (attribute index { xsd:positiveInteger }
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
After =
  element After {
    meta*,
    ((Skolem
      | Ind
      | Data
      | Interval_2
      | Spatial_2
      | Time_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_2
      | content
      | arg_2),
     (Skolem
      | Ind
      | Data
      | Interval_2
      | Spatial_2
      | Time_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_2
      | content
      | arg_2)?)?,
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Before =
  element Before {
    meta*,
    ((Skolem
      | Ind
      | Data
      | Interval_2
      | Spatial_2
      | Time_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_2
      | content
      | arg_2),
     (Skolem
      | Ind
      | Data
      | Interval_2
      | Spatial_2
      | Time_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_2
      | content
      | arg_2)?)?,
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Every =
  element Every {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2)?,
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Any =
  element Any {
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_2
     | content
     | arg_2)*,
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Timer =
  element Timer {
    meta*,
    ((Skolem
      | Ind
      | Data
      | Interval_2
      | Spatial_2
      | Time_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_2
      | content
      | arg_2),
     (Skolem
      | Ind
      | Data
      | Interval_2
      | Spatial_2
      | Time_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_2
      | content
      | arg_2)?)?,
    (attribute type {
       xsd:string {
         pattern =
           "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         minLength = "1"
       }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute style {
         "reasoning"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure {
         "universal"
         | "existential"
         | xsd:string {
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
             minLength = "1"
           }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
arg_3 =
  element arg {
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | After
     | Before
     | Every
     | Any
     | Timer
     | Operator),
    (attribute index { xsd:positiveInteger }
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content_2 =
  element content {
    ((text & _2*)
     | Atom
     | Rel
     | And_2
     | Or_2
     | Implies
     | Forall
     | Exists
     | Expr
     | Fun
     | Rulebase
     | Neg
     | Naf
     | Equivalent
     | Equal
     | Data
     | Skolem
     | Ind
     | Var
     | Plex
     | Interval
     | Negation
     | Rule
     | Spatial
     | Operator
     | After
     | Before
     | Every
     | Any
     | Timer
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Time
     | op
     | formula_2
     | formula_3
     | if
     | then
     | declare
     | formula_5
     | formula_6
     | op_2
     | formula
     | degree
     | strong
     | weak
     | meta
     | torso
     | oid
     | slot
     | left
     | right
     | arg
     | resl
     | repo
     | content_4
     | arg_2
     | formula_4
     | arg_3
     | arg_4),
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
left =
  element left {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Ind
       | Data
       | Interval_2
       | Spatial_2
       | Time_2
       | Var
       | Expr
       | Plex)
  }
right =
  element right {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Ind
       | Data
       | Interval_2
       | Spatial_2
       | Time_2
       | Var
       | Expr
       | Plex)
  }
formula =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Rule)
  }
arg_4 =
  element arg {
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | After
     | Before
     | Every
     | Any
     | Timer
     | Operator),
    (attribute index { xsd:positiveInteger }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content_3 =
  element content {
    ((text & _2*)
     | Atom
     | Rel
     | And_2
     | Or_2
     | Implies
     | Forall
     | Exists
     | Expr
     | Fun
     | Rulebase
     | Neg
     | Naf
     | Equivalent
     | Equal
     | Data
     | Skolem
     | Ind
     | Var
     | Plex
     | Interval
     | Negation
     | Rule
     | Spatial
     | Operator
     | After
     | Before
     | Every
     | Any
     | Timer
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Time
     | op
     | formula_2
     | formula_3
     | if
     | then
     | declare
     | formula_5
     | formula_6
     | op_2
     | formula
     | degree
     | strong
     | weak
     | meta
     | torso
     | oid
     | slot
     | left
     | right
     | arg
     | resl
     | repo
     | content_4
     | arg_2
     | formula_4
     | arg_3
     | arg_4),
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula_2 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
formula_3 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
strong =
  element strong {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
formula_4 =
  element formula {
    (Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists),
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
weak =
  element weak {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
torso =
  element torso {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | And
       | Or
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
declare =
  element declare {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Var
  }
formula_5 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Rule)
  }
formula_6 =
  element formula {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Interval
       | Spatial
       | Equal
       | Operator
       | Time
       | And
       | Or
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists)
  }
Rulebase =
  element Rulebase {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    (Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Rule
     | formula)*
  }
_1 =
  element * {
    attribute * { text }*,
    (text & _1*)
  }
op_2 =
  element op {
    attribute ns1:schemaLocation { text }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          minLength = "1"
        }
        | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Fun
  }
Fun =
  element Fun {
    (attribute per {
       "copy"
       | "value"
       | "open"
       | xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute iri {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    xsd:token
  }
Plex_2 =
  element Plex {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    (Skolem
     | Ind
     | Data
     | Interval_2
     | Spatial_2
     | Time_2
     | Var
     | Expr
     | Plex
     | arg)*,
    repo?
  }
Plex_3 =
  element Plex {
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    slot*,
    resl?
  }
_2 =
  element * {
    (_2
     | attribute * { text }
     | text)+
  }
And_2 =
  element And {
    (attribute closure {
       "universal"
       | "existential"
       | xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    (formula_2
     | Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists)*
  }
Or_2 =
  element Or {
    (attribute closure {
       "universal"
       | "existential"
       | xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
       | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
     }?
     & attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute meta {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    degree?,
    (formula_3
     | Atom
     | Interval
     | Spatial
     | Equal
     | Operator
     | Time
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists)*
  }
content_4 =
  element content {
    ((text & _2*)
     | Atom
     | Rel
     | And_2
     | Or_2
     | Implies
     | Forall
     | Exists
     | Expr
     | Fun
     | Rulebase
     | Neg
     | Naf
     | Equivalent
     | Equal
     | Data
     | Skolem
     | Ind
     | Var
     | Plex
     | Interval
     | Negation
     | Rule
     | Spatial
     | Operator
     | After
     | Before
     | Every
     | Any
     | Timer
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Time
     | op
     | formula_2
     | formula_3
     | if
     | then
     | declare
     | formula_5
     | formula_6
     | op_2
     | formula
     | degree
     | strong
     | weak
     | meta
     | torso
     | oid
     | slot
     | left
     | right
     | arg
     | resl
     | repo
     | content_4
     | arg_2
     | formula_4
     | arg_3
     | arg_4),
    (attribute ns1:schemaLocation { text }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           minLength = "1"
         }
         | xsd:string { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
