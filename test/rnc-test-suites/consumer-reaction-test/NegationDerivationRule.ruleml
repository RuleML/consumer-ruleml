<?xml version="1.0" encoding="UTF-8"?>
<!-- dc:rights [ 'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.' ]-->
<?xml-model href="../../../relaxng/drivers/consumer-relaxed.rnc" type="application/relax-ng-compact-syntax"?>
<And xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <!-- Clocksin/Mellish sample rule 

This example illustrates the polymorphic negation approach of Reaction RuleML 1.0

Since there are many different types of negation for derivation and production / reaction rules  
the generic Negation approach is extensible and allows pointing to external definitions of negation types.

Reaction RuleML 1.0 defines a set of typical negations, such as classical negation, negation-as-failure and inflationary negation 

If no explicit definition of the type of negation is given, <Negation> behaves like a polymorphic negation which assumes the weakest
negation in the given semantic profile, e.g. for normal logic programs it would assume negation as failure, for extented logic it would 
assume classical negation, for classical production rules it would assume inflationary negation, etc.

-->

  <!-- assert knowledge -->

    <!-- rule -->

    <Implies>

      <!-- if ?X does not like wine -->

      <if>

        <!-- we are using negation as failure in the condition, i.e. if the goal can be proofen positively from the closed knowledge base
           the condition fails -->

        <Negation style="ruleml:NegationAsFailure" >
          <!-- note: we could also use the shortcut notation <Naf> -->
          <Atom>
            <op>
              <Rel>likes</Rel>
            </op>
            <Var>X</Var>
            <!-- variable needs to be bound (mode="+") for the negation as finite failure proof -->
            <Ind>wine</Ind>
          </Atom>
        </Negation>

      </if>

      <!-- then John does not like ?X -->

      <then>

        <!-- in the head we use strong classical negation , to explicitly state that John dislikes persons who do not like wine -->


        <Negation type="ruleml:ClassicalNegationType" style="ruleml:ClassicalNegation">
          <!-- note: we could also use the shortcut notation <Neg> -->
          <Atom>
            <op>
              <Rel>likes</Rel>
            </op>
            <Ind>John</Ind>
            <Var>X</Var>
          </Atom>
        </Negation>

      </then>
    </Implies>

    <!-- fact -->

    <!-- we explicitly state that Mary dislikes wine. -->

  <Negation style="ruleml:ClassicalNegation">
      <!-- note: we could also use the shortcut notation <Neg> -->
      <Atom>
        <op>
          <Rel>likes</Rel>
        </op>
        <Ind>Mary</Ind>
        <Ind>wine</Ind>
      </Atom>
    </Negation>

</And>
