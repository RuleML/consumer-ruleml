<?xml version="1.0" encoding="UTF-8"?>

<!-- dc:rights [ 'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.' ]-->

<?xml-model href="../../../relaxng/drivers/consumer-relaxed.rnc" type="application/relax-ng-compact-syntax"?>
<And xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:ruleml = "http://ruleml.org/metamodel/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <!-- 
This example shows how the generic Operation is used as modal connective in modal logic programs

-->

  <!-- assert knowledge -->

    
    <!-- it is possible that -->
    <!-- normalized -->
    <Operation type="ruleml:AlethicOperation" style="ruleml:Possible">
      <formula index="1">        
        <Atom>
          <Rel>p</Rel>
        </Atom>
      </formula>
    </Operation>

  <!-- compact -->
  <Operation type="ruleml:AlethicOperation" style="ruleml:Possible">
    <Atom>
      <Rel>p</Rel>
    </Atom>
  </Operation>
  
  <!-- it is not necessary that not  (= it is possible that) -->
    <Neg>
      <Operation type="ruleml:AlethicOperation" style="ruleml:Necessary">
        <Neg>
          <Atom>
            <Rel>p</Rel>
          </Atom>
        </Neg>
      </Operation>
    </Neg>

    <Equivalent>
      <!-- it is not necessary that -->
      <Neg>
        <Operation type="ruleml:AlethicOperation" style="ruleml:Necessary">
          <Atom>
            <Rel>p</Rel>
          </Atom>
        </Operation>
      </Neg>
      <!-- it is possible that not -->
      <Operation type="ruleml:AlethicOperation" style="ruleml:Possible">        
        <Neg>
          <Atom>
            <Rel>p</Rel>
          </Atom>
        </Neg>
      </Operation>
    </Equivalent>
 
    <!-- For all X it is necessary that p(X) -->
    <Forall>
      <Var>X</Var>
      <Operation type="ruleml:AlethicOperation" style="ruleml:Necessary">
        <Atom>
          <Rel>p</Rel>
          <Var>X</Var>
        </Atom>
      </Operation>
    </Forall>

    <!-- Barcan formulae: it is necessary that for all X it is p(X) (= For all X it is necessary that p(X)) -->
    <Operation type="ruleml:AlethicOperation" style="ruleml:Necessary">
      <Atom closure="universal">
        <Rel>p</Rel>
        <Var>X</Var>
      </Atom>
    </Operation>  
       
       
    <!-- modal rule: "if obliged(p(X)) then permitted(p(X))" -->    
    <Implies>
      <if>
        <Operation type="ruleml:DeonticOperation" style="ruleml:Obliged">            
          <Atom>
            <Rel>p</Rel>
            <Var>X</Var>
          </Atom>
        </Operation>
      </if>
      <then>
        <Operation type="ruleml:DeonticOperation" style="ruleml:Permitted"> 
          <Atom>
            <Rel>p</Rel>
            <Var>X</Var>
          </Atom>
        </Operation>   
      </then>
    </Implies>
    
    
    <!-- modal rule: "obliged(if p(X) then q(X))" -->
    
    <Operation type="ruleml:DeonticOperation" style="ruleml:Obliged">
      <Implies>
        <if>
          <Atom>
              <Rel>p</Rel>
              <Var>X</Var>
          </Atom>
        </if>
        <then>
          <Atom>
              <Rel>q</Rel>
              <Var>X</Var>
          </Atom>
        </then>
      </Implies>
    </Operation>

    <!-- modal rule: "if obliged(p(X)) then obliged(q(X))" -->
    
   <Implies>
        <if>
          <Operation type="ruleml:DeonticOperation" style="ruleml:Obliged">            
              <Atom>
                <Rel>p</Rel>
                <Var>X</Var>
              </Atom>
          </Operation>  
        </if>
        <then>
          <Operation type="ruleml:DeonticOperation" style="ruleml:Obliged"> 
            <Atom>
              <Rel>q</Rel>
              <Var>X</Var>
            </Atom>
          </Operation>   
        </then>
   </Implies>

    <!-- modal rule: "if obliged(neg(p(X))) and p(X) then obliged(q(X))" (Contrary-to-duty obligation) -->
    
    <Implies>
      <if>
        <And>
          <Operation type="ruleml:DeonticOperation" style="ruleml:Obliged">
            <Neg>            
              <Atom>
                <Rel>p</Rel>
                <Var>X</Var>
              </Atom>
            </Neg>  
          </Operation>

          <Atom>
            <Rel>p</Rel>
            <Var>X</Var>
          </Atom>
          
        </And>  
      </if>
      <then>
        <Operation type="ruleml:DeonticOperation" style="ruleml:Obliged"> 
          <Atom>
            <Rel>q</Rel>
            <Var>X</Var>
          </Atom>
        </Operation>   
      </then>
    </Implies>


    <!-- reified modal rule: "if happens(p(X),T) and holds(forbidden(p(X)),T) then initiates(p(X),obliged(q(X)),T)" 
        (note: in KR Reaction RuleML this Event Calculus formalization is directly supported)  -->
    
    <Implies>
      <if>
        <Operation type="ruleml:Connective" style="ruleml:And"> <!-- operator connective And -->
          
          <Atom>
            <Rel iri="ruleml:Happens"/>
            <Expr><Fun>p</Fun><Var>X</Var></Expr>
            <Time><Var>T</Var></Time>
          </Atom>
          
          <Atom>
            <Rel iri="ruleml:Holds"/>
            <Expr>
              <Fun iri="ruleml:Forbidden"/>
              <Expr><Fun>p</Fun><Var>X</Var></Expr>
            </Expr>
            <Time><Var>T</Var></Time>
          </Atom>  
          
        </Operation>  
      </if>
      <then>
        <Atom>
          <Rel iri="ruleml:Initiates"/>
          <Expr><Fun>p</Fun><Var>X</Var></Expr>
          <Expr>
            <Fun iri="ruleml:Obliged"/>
            <Expr><Fun>q</Fun><Var>X</Var></Expr>
          </Expr>
          <Time><Var>T</Var></Time>
        </Atom> 
      </then>
    </Implies>

</And>
